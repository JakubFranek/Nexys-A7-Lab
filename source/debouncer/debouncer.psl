vunit debouncer_psl (debouncer(rtl)) {

    default clock is rising_edge(i_clk);

    -- Covers
    cover_output_toggle :
    cover {(o_output = '0')[+]; (o_output = '1')[+]; (o_output = '0')[+]};

    cover_input_toggle :
    cover {(i_input = '0'); (i_input = '1'); (i_input = '0'); (i_input = '1')[*2 to inf]; (o_output = '1')};

    -- Assumptions
    assume (always (i_clk_ena -> next not i_clk_ena));    

    -- Asserts
    counter_stable_disabled :
    assert always ((not i_clk_ena and input_sync = q_input_sync_dly) -> next (stable(q_counter)));

    counter_increments_when_input_stable :
    assert always ((input_sync = q_input_sync_dly and i_clk_ena and q_counter /= PERIOD)
                    -> next (q_counter = prev(q_counter) + 1));

    output_stable_before_period :
    assert always (q_counter /= PERIOD -> next (stable(o_output)));

    q_counter_resets_on_input_change :
    assert always (input_sync /= q_input_sync_dly -> next (q_counter = 0));

    q_counter_resets_after_period :
    assert always (
        q_counter = PERIOD and i_clk_ena and input_sync = q_input_sync_dly
    ) -> next (q_counter = 0);

    o_output_updates_value :
    assert always (
        q_counter = PERIOD and i_clk_ena and input_sync = q_input_sync_dly
    ) -> next (o_output = input_sync) abort (input_sync /= q_input_sync_dly);

}